class CMDBox { constructor(options = {}) { this.options = Object.assign({ width: 500, height: 300, minWidth: 200, minHeight: 100, initialText: 'C:\\> Welcome to CMD-like box\nC:\\>_', backgroundColor: '#1e1e1e', textColor: '#00ff00', fontFamily: 'monospace', fontSize: '14px' }, options); this.createStyles(); this.createBox(); this.attachEvents(); } createStyles() { if (document.getElementById('cmd-box-style')) return; const style = document.createElement('style'); style.id = 'cmd-box-style'; style.innerHTML = `@keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } } @keyframes fadeOut { from { opacity: 1; transform: scale(1); } to { opacity: 0; transform: scale(0.95); } } .cmd-box.show { animation: fadeIn 0.3s ease-out forwards; } .cmd-box.hide { animation: fadeOut 0.3s ease-in forwards; } .cmd-box { position: fixed; top: 100px; left: 100px; width: ${this.options.width}px; height: ${this.options.height}px; background-color: ${this.options.backgroundColor}; color: ${this.options.textColor}; font-family: ${this.options.fontFamily}; font-size: ${this.options.fontSize}; border: 2px solid #333; border-radius: 5px; padding: 10px; overflow-y: auto; box-sizing: border-box; white-space: pre-wrap; display: none; } .resize-handle { position: absolute; width: 15px; height: 15px; right: 0; bottom: 0; cursor: se-resize; background-color: #555; border-top-left-radius: 4px; z-index: 10000; }`; document.head.appendChild(style); } createBox() { this.box = document.createElement('div'); this.box.className = 'cmd-box'; this.box.setAttribute('contenteditable', 'true'); this.box.innerText = this.options.initialText; document.body.appendChild(this.box); this.resizeHandle = document.createElement('div'); this.resizeHandle.className = 'resize-handle'; this.box.appendChild(this.resizeHandle); } attachEvents() { let isDragging = false; let offsetX = 0, offsetY = 0; this.box.addEventListener('mousedown', (e) => { if (e.target === this.resizeHandle || window.getSelection().toString()) return; isDragging = true; offsetX = e.clientX - this.box.offsetLeft; offsetY = e.clientY - this.box.offsetTop; this.box.style.userSelect = 'none'; }); let isResizing = false; this.resizeHandle.addEventListener('mousedown', (e) => { e.stopPropagation(); isResizing = true; }); document.addEventListener('mousemove', (e) => { if (isDragging) { this.box.style.left = `${e.clientX - offsetX}px`; this.box.style.top = `${e.clientY - offsetY}px`; } else if (isResizing) { const newWidth = e.clientX - this.box.offsetLeft; const newHeight = e.clientY - this.box.offsetTop; this.box.style.width = `${Math.max(this.options.minWidth, newWidth)}px`; this.box.style.height = `${Math.max(this.options.minHeight, newHeight)}px`; } }); document.addEventListener('mouseup', () => { isDragging = false; isResizing = false; this.box.style.userSelect = ''; }); this.box.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); const typedText = this.box.innerText.trim(); this.onEnter(typedText); } }); } onEnter(text) { console.log('User typed:', text); } show() { this.box.style.display = 'block'; this.box.classList.remove('hide'); void this.box.offsetWidth; this.box.classList.add('show'); } hide() { this.box.classList.remove('show'); this.box.classList.add('hide'); this.box.addEventListener('animationend', () => { if (this.box.classList.contains('hide')) { this.box.style.display = 'none'; } }, { once: true }); } toggle() { if (this.box.style.display === 'none') { this.show(); } else { this.hide(); } } setText(text) { this.box.innerText = text; } appendLine(text) { this.box.innerText += `\n${text}`; this.box.scrollTop = this.box.scrollHeight; } }